// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/machine_stream.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MachineMap_Pause_FullMethodName         = "/proto.MachineMap/Pause"
	MachineMap_UnPause_FullMethodName       = "/proto.MachineMap/UnPause"
	MachineMap_MachineStream_FullMethodName = "/proto.MachineMap/MachineStream"
)

// MachineMapClient is the client API for MachineMap service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MachineMapClient interface {
	Pause(ctx context.Context, in *Machine, opts ...grpc.CallOption) (*Machine, error)
	UnPause(ctx context.Context, in *Machine, opts ...grpc.CallOption) (*Machine, error)
	MachineStream(ctx context.Context, in *MachineStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Machine], error)
}

type machineMapClient struct {
	cc grpc.ClientConnInterface
}

func NewMachineMapClient(cc grpc.ClientConnInterface) MachineMapClient {
	return &machineMapClient{cc}
}

func (c *machineMapClient) Pause(ctx context.Context, in *Machine, opts ...grpc.CallOption) (*Machine, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Machine)
	err := c.cc.Invoke(ctx, MachineMap_Pause_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineMapClient) UnPause(ctx context.Context, in *Machine, opts ...grpc.CallOption) (*Machine, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Machine)
	err := c.cc.Invoke(ctx, MachineMap_UnPause_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineMapClient) MachineStream(ctx context.Context, in *MachineStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Machine], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MachineMap_ServiceDesc.Streams[0], MachineMap_MachineStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MachineStreamRequest, Machine]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MachineMap_MachineStreamClient = grpc.ServerStreamingClient[Machine]

// MachineMapServer is the server API for MachineMap service.
// All implementations must embed UnimplementedMachineMapServer
// for forward compatibility.
type MachineMapServer interface {
	Pause(context.Context, *Machine) (*Machine, error)
	UnPause(context.Context, *Machine) (*Machine, error)
	MachineStream(*MachineStreamRequest, grpc.ServerStreamingServer[Machine]) error
	mustEmbedUnimplementedMachineMapServer()
}

// UnimplementedMachineMapServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMachineMapServer struct{}

func (UnimplementedMachineMapServer) Pause(context.Context, *Machine) (*Machine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pause not implemented")
}
func (UnimplementedMachineMapServer) UnPause(context.Context, *Machine) (*Machine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnPause not implemented")
}
func (UnimplementedMachineMapServer) MachineStream(*MachineStreamRequest, grpc.ServerStreamingServer[Machine]) error {
	return status.Errorf(codes.Unimplemented, "method MachineStream not implemented")
}
func (UnimplementedMachineMapServer) mustEmbedUnimplementedMachineMapServer() {}
func (UnimplementedMachineMapServer) testEmbeddedByValue()                    {}

// UnsafeMachineMapServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MachineMapServer will
// result in compilation errors.
type UnsafeMachineMapServer interface {
	mustEmbedUnimplementedMachineMapServer()
}

func RegisterMachineMapServer(s grpc.ServiceRegistrar, srv MachineMapServer) {
	// If the following call pancis, it indicates UnimplementedMachineMapServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MachineMap_ServiceDesc, srv)
}

func _MachineMap_Pause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Machine)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineMapServer).Pause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MachineMap_Pause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineMapServer).Pause(ctx, req.(*Machine))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineMap_UnPause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Machine)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineMapServer).UnPause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MachineMap_UnPause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineMapServer).UnPause(ctx, req.(*Machine))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineMap_MachineStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MachineStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MachineMapServer).MachineStream(m, &grpc.GenericServerStream[MachineStreamRequest, Machine]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MachineMap_MachineStreamServer = grpc.ServerStreamingServer[Machine]

// MachineMap_ServiceDesc is the grpc.ServiceDesc for MachineMap service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MachineMap_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MachineMap",
	HandlerType: (*MachineMapServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Pause",
			Handler:    _MachineMap_Pause_Handler,
		},
		{
			MethodName: "UnPause",
			Handler:    _MachineMap_UnPause_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MachineStream",
			Handler:       _MachineMap_MachineStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/machine_stream.proto",
}
